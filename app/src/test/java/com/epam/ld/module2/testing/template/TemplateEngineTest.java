package com.epam.ld.module2.testing.template;import com.epam.ld.module2.testing.Client;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.DynamicTest;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.TestFactory;import org.junit.jupiter.api.condition.DisabledForJreRange;import org.junit.jupiter.api.condition.JRE;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.ValueSource;import org.mockito.Mockito;import org.mockito.Spy;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.stream.Stream;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.mockito.Mockito.when;class TemplateEngineTest {    private TemplateEngine templateEngine;    private Template template;    private Client client;    @Spy    List<String> spyList = Arrays.asList("testSubject", "testBody");    /**     * Implement Disabling test on condition     * The system replaces variable placeholders like #{subject} from a template with values provided at runtime.     */    @Test    @DisabledForJreRange(min = JRE.JAVA_12, max = JRE.JAVA_15)    void generateMessage_shouldReplacePlaceholderWhenReceivesValue() {        List<String> values = Arrays.asList("testSubject", "testBody");        template = new Template("Subject: #{subject} " + "Body: #{body}");        templateEngine = new TemplateEngine();        String actualMessage = templateEngine.generateMessage(values, template, client);        assertEquals("Subject: testSubject " + "Body: testBody", actualMessage);    }    /**     * Using ExpectedException rule to check exceptions + Assertion mechanism     * If at least one placeholder value is not provided at runtime – template generator should throw an exception.     */    @ParameterizedTest()    @ValueSource(strings = {"subject", " ", ""})    void generateMessage_shouldThrowExceptionWhenReceivesEmptyValue(String subject) {        List<String> values = Collections.singletonList(subject);        template = new Template("Subject:  #{subject} " + "Body:  #{body}");        templateEngine = new TemplateEngine();        assertThrows(IllegalArgumentException.class,                () -> templateEngine.generateMessage(values, template, client), "Input shouldn't be empty");    }    /**     * Template generator ignores values for variables provided at runtime that aren’t found from the template.     */    @Test    void generateMessage_shouldIgnoreValuesForVariablesMissedInTemplate() {        List<String> values = Arrays.asList("testSubject", "testBody", "testIgnore");        template = new Template("Subject: #{subject} " + "Body: #{body}");        templateEngine = new TemplateEngine();        String actualSubject = templateEngine.generateMessage(values, template, client);        assertEquals("Subject: testSubject " + "Body: testBody", actualSubject);    }    /**     * System should support values passed in runtime with #{…}.     * E.g. template is  “Some text: #{value}” and  at runtime #{value} passed as  #{tag}.     * Output should be “Some text: #{tag}”.     */    // The regex for this case would be #(\{.+\}) - but it works even without it.    @Test    void generateMessage_shouldSupportFormat() {        List<String> values = Arrays.asList("testSubject", "#{tag}");        template = new Template("Subject: #{subject} " + "Body: #{body}");        templateEngine = new TemplateEngine();        String actualSubject = templateEngine.generateMessage(values, template, client);        assertEquals("Subject: testSubject " + "Body: #{tag}", actualSubject);    }    /**     * Dynamic tests     * The system replaces variable placeholders like #{subject} from a template with values provided at runtime.     */    @TestFactory    Stream<DynamicTest> dynamicGenerateMessage_shouldReplacePlaceholderWhenReceivesValue() {        List<String> values = Arrays.asList("testSubject", "testBody");        template = new Template("Subject: #{subject} " + "Body: #{body}");        templateEngine = new TemplateEngine();        return values.stream().map(v -> DynamicTest.dynamicTest("Generating message from template: ",                () -> assertEquals("Subject: testSubject " + "Body: testBody",                        templateEngine.generateMessage(values, template, client))));    }    /**     * Use spy     * The system replaces variable placeholders like #{subject} from a template with values provided at runtime.     */    @Test    void generateMessage_shouldReplacePlaceholders() {        TemplateEngine templateEngine = Mockito.spy(TemplateEngine.class);        String expectedMessage = "Subject: testSubject " + "Body: testBody";        List<String> values = Arrays.asList("testSubject", "testBody");        Template template = new Template("Subject: #{subject} " + "Body: #{body}");        when(templateEngine.generateMessage(values, template, client)).thenReturn(expectedMessage);        Assertions.assertEquals(expectedMessage, templateEngine.generateMessage(values, template, client));    }}